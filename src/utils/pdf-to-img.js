const { promises: fs } = require("fs");
const { pdf } = require("pdf-to-img");
const path = require("path");
const { v4: uuidv4 } = require("uuid");

/**
 * Chuy·ªÉn ƒë·ªïi PDF th√†nh ·∫£nh (kh√¥ng l∆∞u file)
 * @param {Buffer} pdfBuffer - File PDF d∆∞·ªõi d·∫°ng buffer
 * @returns {Promise<Array<Buffer>>} - Danh s√°ch c√°c ·∫£nh d∆∞·ªõi d·∫°ng buffer
 */
const convertPdfToImages = async (pdfBuffer) => {
  try {
    // T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file PDF
    const tempDir = path.join(__dirname, "../temp");
    await fs.mkdir(tempDir, { recursive: true });

    // Ghi buffer PDF v√†o file t·∫°m
    const pdfPath = path.join(tempDir, `${uuidv4()}.pdf`);
    await fs.writeFile(pdfPath, pdfBuffer);

    console.log(`üìÑ ƒê√£ l∆∞u file PDF t·∫°m: ${pdfPath}`);

    // T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh t·∫°m th·ªùi
    const imageDir = path.join(tempDir, uuidv4());
    await fs.mkdir(imageDir, { recursive: true });

    // S·ª≠ d·ª•ng pdf-to-img ƒë·ªÉ chuy·ªÉn ƒë·ªïi PDF th√†nh ·∫£nh
    const document = await pdf(pdfPath, { scale: 1 });

    let counter = 1;
    const imageBuffers = [];
    for await (const image of document) {
      const imagePath = path.join(imageDir, `page${counter}.png`);
      await fs.writeFile(imagePath, image);
      imageBuffers.push(await fs.readFile(imagePath));
      counter++;
    }
    console.log(`üì∏ ƒê√£ chuy·ªÉn ƒë·ªïi PDF th√†nh ${imageBuffers.length} ·∫£nh.`);

    // X√≥a file PDF t·∫°m v√† th∆∞ m·ª•c ·∫£nh t·∫°m
    await fs.unlink(pdfPath);
    await fs.rm(imageDir, { recursive: true, force: true });
    console.log("üßπ ƒê√£ x√≥a file PDF v√† th∆∞ m·ª•c ·∫£nh t·∫°m.");

    return imageBuffers; // Tr·∫£ v·ªÅ danh s√°ch buffer ·∫£nh
  } catch (error) {
    throw new Error("Failed to convert PDF to images: " + error.message);
  }
};

module.exports = { convertPdfToImages };