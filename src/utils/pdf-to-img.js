const poppler = require("pdf-poppler");
const { Poppler } = require("node-poppler");
const fs = require("fs/promises");
const path = require("path");
const { v4: uuidv4 } = require("uuid");
const os = require("os");

/**
 * Chuy·ªÉn ƒë·ªïi PDF th√†nh ·∫£nh (kh√¥ng l∆∞u file)
 * @param {Buffer} pdfBuffer - File PDF d∆∞·ªõi d·∫°ng buffer
 * @returns {Promise<Array<Buffer>>} - Danh s√°ch c√°c ·∫£nh d∆∞·ªõi d·∫°ng buffer
 */
const convertPdfToImages = async (pdfBuffer) => {
  try {
    // T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file PDF
    const tempDir = path.join(__dirname, "../temp");
    await fs.mkdir(tempDir, { recursive: true });

    // Ghi buffer PDF v√†o file t·∫°m
    const pdfPath = path.join(tempDir, `${uuidv4()}.pdf`);
    await fs.writeFile(pdfPath, pdfBuffer);

    console.log(`üìÑ ƒê√£ l∆∞u file PDF t·∫°m: ${pdfPath}`);

    // T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh t·∫°m th·ªùi
    const imageDir = path.join(tempDir, uuidv4());
    await fs.mkdir(imageDir, { recursive: true });

    if (os.platform() === "linux") {
      const nodePoppler = new Poppler();
      // C·∫•u h√¨nh chuy·ªÉn ƒë·ªïi PDF -> PNG
      const options = {
        allFiles: true,
        pngFile: true,
      };

      // Chuy·ªÉn ƒë·ªïi PDF th√†nh danh s√°ch ·∫£nh PNG
      await nodePoppler.pdfImages(pdfPath, imageDir, options);
    } else {
      // C·∫•u h√¨nh chuy·ªÉn ƒë·ªïi PDF -> PNG
      const options = {
        format: "png",
        out_dir: imageDir,
        out_prefix: "slide",
        resolution: 600, // DPI cao ƒë·ªÉ ·∫£nh s·∫Øc n√©t
      };

      // Chuy·ªÉn ƒë·ªïi PDF th√†nh danh s√°ch ·∫£nh PNG
      await poppler.convert(pdfPath, options);
    }

    // L·∫•y danh s√°ch ·∫£nh ƒë√£ chuy·ªÉn ƒë·ªïi
    const imageFiles = await fs.readdir(imageDir);
    console.log(`üì∏ ƒê√£ chuy·ªÉn ƒë·ªïi PDF th√†nh ${imageFiles.length} ·∫£nh.`);

    // ƒê·ªçc t·∫•t c·∫£ ·∫£nh v√†o buffer
    const imageBuffers = await Promise.all(
      imageFiles.map(async (file) => {
        const imagePath = path.join(imageDir, file);
        const imageBuffer = await fs.readFile(imagePath);
        return imageBuffer;
      })
    );
    console.log(`üì∏ ƒê√£ ƒë·ªçc ${imageBuffers.length} ·∫£nh v√†o buffer.`);

    // X√≥a file PDF t·∫°m v√† th∆∞ m·ª•c ·∫£nh t·∫°m
    await fs.unlink(pdfPath);
    await fs.rm(imageDir, { recursive: true, force: true });
    console.log("üßπ ƒê√£ x√≥a file PDF v√† th∆∞ m·ª•c ·∫£nh t·∫°m.");

    return imageBuffers; // Tr·∫£ v·ªÅ danh s√°ch buffer ·∫£nh
  } catch (error) {
    throw new Error("Failed to convert PDF to images: " + error.message);
  }
};

module.exports = { convertPdfToImages };
